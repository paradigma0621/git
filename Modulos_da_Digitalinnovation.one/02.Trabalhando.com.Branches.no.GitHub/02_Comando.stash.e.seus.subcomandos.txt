Notas de Aula de Lucas Favaro Borsatto (email: paradigma0621@gmail.com)
Módulo "Trabalhando com Branches no GitHub" do Site da Digital Innovation One ( https://digitalinnovation.one/ )
Seção 02 - Visualização de histórico
Aula 01 - Comando stash e seus subcomandos
Professor: Otávio Reis
----------------------------------------------------------------------------------------------------------------------

	Renomear nome de um branch:
	Há dois casos possíveis:
		1) Quando já estamos com a HEAD na branch que queremos renomear (obs: podemos ir para ela com: git checkout nomeBranch):
			git branch -m novoNomeDeBranch

		2) Quando estamos em uma branch, e queremos renomear o nome de outra branch:
			git branch -m branchQueQueremosRenomear novoNomeDeBranch

----------------------------------------------------------------------------------------------------------------------

	Deletar branch:
		git branch -d nomeBranchQueQueroDeletar

--------------------------
	Index (=Staging area) = arquivos adicionados para a staging area.

	Suponhamos que estamos trabalhando numa branch "branchAlterada" que contém dois arquivos a mais (file1.txt, file2.txt) que uma outra "branchX"; façamos para os 2 arquivos:
		git add file1.txt file2.txt
		git status   (vai relatar que está na stage area os: file1.txt, file2.txt)
	Caso façamos:
		git checkout branchX
	os arquivos da "branchAlterada" vem contaminar o contexto da "branchX". Os arquivos file1.txt e file2.txt estarão no diretório corrente. Além disso podemos vê-los com:
		git status   (vai relatar que estão na stage area os: file1.txt, file2.txt)

	Um novo conceito para contornar esse comportamento é o stash: como que guarda os arquivos numa caixa - mais especificamente: guarda os arquivos do index (da staging area) e os arquivos untracked, também, numa caixa. Comando:
		git stash save "Mensagem qualquer descritiva"
			ou
		git stash
	(nessa última o próprio git definirá a mensagem + SHA1 do último commit da branch. Obs: O 'WIP' da mensagem gerada significa: "Work in progress")

	O stash funciona como um array. Podemos listas os mesmos salvos com:
		git stash list

	Após colocarmos os arquivos file1.txt e file2.txt na stash, com o comando:
		git status
	vai retornar que não há nada para ser comitado (os arquivos não estarão mais lá, não haverá mais nada pendente).

	Para recuperarmos o conteúdo da stash novamente:
		git stash list      (pegar daqui o número do elemento de dentro do array que queremos)
		git stash pop NUMERO_PEGO_DO_COMANDO_DA_LINHA_DE_CIMA
	Exemplo: git stash pop 1

	Para limpar o que está dentro da stash:
		git stash clear
	
	Observação importante: usar o git stash apenas de uma forma momentânea. Tomar cuidado para não trabalhar em grandes projetos com com muitas alterações de longo prazo.

----------------------------------------------------------------------------------------------------------------------

